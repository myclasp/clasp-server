<header class="group-header bg-color-3">
  <div class="container-fluid">
    <h1>
    <%= @group.name %> / <%= pluralize @group.memberships.count, "member" %>
    <%= link_to '(Edit)', edit_group_path(@group) if @group.is_admin?(current_user) %>
    </h1>
  </div>
</header>
  
<div id="group-content">

  <div class="container-fluid">
  <div class="row">   
    
    <div class="col-md-2">
    <section id="about-group">
      <%= image_tag @group.image_url unless @group.image_url.blank? %>
      <p><%= @group.description%></p>
      <a href="#" class="rounded button">Join this group </a>
    </section>
    </div>

    <div id="visualisations" class="col-md-10">

    <nav class="row">
      <div class="container-fluid">
        <ul class="nav navbar-nav tabs" style=""> 
          <li><%= link_to 'Map', '#map' , { :class=>"active" } %></li>
          <li><%= link_to 'Hour', '#hour' %></li>
          <li><%= link_to 'Week', '#week' %></li>
          <li><%= link_to 'Month', '#month' %></li>
        </ul>
      </div>
    </nav>


    <section class="tab-panel">
      <header class="vis-header">
        <%= button_to 'previous', '#', id: 'previous_day', method: :get, remote: true, data: {start: (@hourly_moments_start - 1.day).to_i, points: 24, interval: 'hour' } %>
        <h2 class="clear">
          <span id="hour_label"><%= "#{@hourly_moments_start.day.ordinalize} #{@hourly_moments_start.strftime('%B %Y')}" %></span>
        </h2>
        <%= button_to 'next', '#', id: 'next_day', method: :get, remote: true, data: {start: (@hourly_moments_start + 1.day).to_i, points: 24, interval: 'hour' } %>
      </header>
      <canvas id="hour" width="300" height="100"></canvas>
    </section>

    <section class="tab-panel">
      <header class="vis-header">
      <%= button_to 'previous', '#', id: 'previous_week', method: :get, remote: true, data: {start: (@week_moments_start - 1.week).to_i, points: 7, interval: 'day' } %>
      <h2><span id="week_label">Week beginning <%= "#{@week_moments_start.day.ordinalize} #{@week_moments_start.strftime('%B %Y')}" %></span></h2>
      <%= button_to 'next', '#', id: 'next_week', method: :get, remote: true, data: {start: (@week_moments_start + 1.week).to_i, points: 7, interval: 'day' } %>
      </header>
      <canvas id="week" width="300" height="100"></canvas>
    </section>
     
     
     <section class="tab-panel">
      <header class="vis-header">
      <h2 class="clear">Month</h2>
      </header>
      <%= render partial: 'calendar', locals: { group: @group, calendar_moments: @calendar_moments } %>
     </section>


     <section class="tab-panel">
      <header class="vis-header">    
      <h2>Map</h2>
      
      <div class="clear" id='map'>
      <% if @is_group_member %>
        <div id="map-legend">
          <p><span class="group-icon"></span> Group datamarks</p>
          <p><span class="user-icon"></span> My datamarks</p> 
        </div>
      <% end %>
      </div>
      </header>
     </section>
  
    </div> <!-- end of visualisations -->

  </div>
  </div>

</div>


<div class="moment-modals">
<% for marker in @markers %>
<% next unless marker[:is_mine] %>

<div class="modal fade edit-moment-<%= marker[:moment].id %>" tabindex="-1" role="dialog" aria-labelledby="editMomentModal">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      
      <h3>Edit Datamark</h3>
      <%= label_tag :description %>
      <%= text_field_tag :description %>
      <%= submit_tag :save %>

    </div>
  </div>
</div>

<% end %>
</div>


<%= content_for :script do %>
  //HOUR LINE

  function generateData(points){
    var d = [];
    for (i=0; i<points; i++){
      d.push( (Math.floor(Math.random() * 201) - 100));
    }
    return d;
  };

  function prepForGraph(data, key){
    var d = [];

    data.forEach(function(point, i){
      d.push(point[key].ratio * 100);
    });

    return d;
  };

  var hourlyMoments = <%= @hourly_moments.to_json.html_safe %>;

  var hourDatasets = [
    { label: 'Up/Down Ratio', fill: false, backgroundColor: "orange", borderColor: "silver", data: prepForGraph(hourlyMoments, 'group'), lineTension: 0.2 }
  ];

  <% if @is_group_member %>
    hourDatasets.push({ label: 'My Ratio', fill: false, backgroundColor: "orange", 
      borderColor: "silver", data: prepForGraph(hourlyMoments, 'user'), 
      borderDash: [10.0, 10.0], borderDashOffset: 1.0, lineTension: 0.2
    });
  <% end %>

  <% hours = []; 24.times { |x| hours << (@week_moments_start + x.hour).strftime("%k") + "-" +
      (@week_moments_start + (x+1).hour).strftime("%k") } %>

  var labels = <%= hours.to_s.html_safe %>;

  var hourCanvas = document.getElementById("hour");
  var hourChart = new Chart(hourCanvas, {
    type: 'line',
    data: { labels: labels, datasets: hourDatasets, momentData: hourlyMoments },
    options: {
      scales: { 
        xAxes: [{ position: 'bottom' }],
        yAxes: [{ ticks: { max: 100, min: -100 } }]
      },
      tooltips: {
        mode: 'single',
        callbacks: {
          label: function(tooltipItem, data) {
            var idx = tooltipItem.index;
            var point = this._data.momentData[idx];
            var str = "Group ups: " + point.group.ones + ", downs: " + point.group.zeroes;
            return str;
          },
          afterLabel: function(tooltipItem, data) {
            <% if @is_group_member %>
              var idx = tooltipItem.index;
              var point = this._data.momentData[idx];
              var str = "User ups: " + point.user.ones + ", downs: " + point.user.zeroes;
              return str;
            <% else %>
              return '';
            <% end %>
          }
        },
        footerFontStyle: 'normal'
      }
    }
  });

  //console.log(hourChart.chart.controller);
  //hourChart.chart.controller.boxes[2] //xaxis
  //hourChart.chart.controller.boxes[3] //xaxis
  //hourChart.render(1000, false)

  // WEEK LINE

  var weekMoments = <%= @week_moments.to_json.html_safe %>;

  var weekDatasets = [
    { label: 'Up/Down Ratio', fill: false, backgroundColor: "orange", borderColor: "silver", data: prepForGraph(weekMoments, 'group'), lineTension: 0.2, momentData: weekMoments }
  ];

  <% if @is_group_member %>
    weekDatasets.push({ label: 'My Up/Down Ratio', fill: false, backgroundColor: "orange", 
      borderColor: "silver", data: prepForGraph(weekMoments, 'user'), 
      borderDash: [10.0, 10.0], borderDashOffset: 1.0, lineTension: 0.2
    });
  <% end %>
    
  <% days = []
  7.times { |x| days << (@week_moments_start + x.day).strftime("%a") }; %>
  var labels = <%= days.to_s.html_safe %>;

  var weekCanvas = document.getElementById("week");
  
  var weekChart = new Chart(weekCanvas, {
    type: 'line',
    data: { labels: labels,  datasets: weekDatasets, momentData: weekMoments },
    options: {
      legend: {
        labels: {
          fillStyle: 'rgb(255, 99, 132)'
        }
      },
      scales: {
        xAxes: [{ position: 'bottom' }],
        yAxes: [{ ticks: { max: 100, min: -100 } }]
      },
      tooltips: {
        mode: 'single',
        callbacks: {
          label: function(tooltipItem, data) {
            var idx = tooltipItem.index;
            var point = this._data.momentData[idx];
            var str = "Group ups: " + point.group.ones + ", downs: " + point.group.zeroes;
            return str;
          },
          afterLabel: function(tooltipItem, data) {
            <% if @is_group_member %>
              var idx = tooltipItem.index;
              var point = this._data.momentData[idx];
              var str = "User ups: " + point.user.ones + ", downs: " + point.user.zeroes;
              return str;
            <% else %>
              return '';
            <% end %>
          }
        },
        footerFontStyle: 'normal'
      }
    }
  });

  var buildNextPrevUrl = function(e){
    var url = '<%= group_period_moments_url(@group) %>';
    var interval = $(e).attr('data-interval');
    var start    = $(e).attr('data-start');
    var points   = $(e).attr('data-points');
    url = url + '?start=' + start + '&points=' + points + '&interval=' + interval;
    return url;
  };


  $('#next_day, #previous_day').click(function(e){
  
    var url = buildNextPrevUrl(e.currentTarget);
    $('#next_day, #previous_day').prop('disabled', true);

    jQuery.getJSON(url, function(result) { 
      
      $('#next_day').attr('data-start', result.next_start);
      $('#previous_day').attr('data-start', result.previous_start);
      $('#next_day, #previous_day').prop('disabled', false);
      $('#hour_label').text(moment(result.start * 1000).format('Do MMMM YYYY'));

      hourChart.data.momentData = result.data;

      hourChart.data.datasets[0].data = prepForGraph(result.data, 'group');
      if (result.data[0].user.ratio != undefined){ 
        hourChart.data.datasets[1].data = prepForGraph(result.data, 'user');
      }

      hourChart.update(); 
    });
  });

  $('#next_week, #previous_week').click(function(e){
    var url = buildNextPrevUrl(e.currentTarget);
    $('#next_week, #previous_week').prop('disabled', true);

    jQuery.getJSON(url, function(result) { 
      
      $('#next_week').attr('data-start', result.next_start);
      $('#previous_week').attr('data-start', result.previous_start);
      $('#next_week, #previous_week').prop('disabled', false);
      $('#week_label').text('Week beginning '+ moment(result.start * 1000).format('Do MMMM YYYY'));

      weekChart.data.momentData = result.data;

      weekChart.data.datasets[0].data = prepForGraph(result.data, 'group');
      if (result.data[0].user.ratio != undefined){ 
        weekChart.data.datasets[1].data = prepForGraph(result.data, 'user');
      }

      weekChart.update(); 
    });
  });


  //MAP
  var map = L.map('map');
  map.setView([40.0, 0.0], 2);

  L.tileLayer('http://a.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
    maxZoom: 18, subdomains: '', }).addTo(map);

  var normalIcon = L.icon({
    iconUrl: '<%= asset_path('marker-icon.png') %>',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -27],
    shadowUrl: '<%= asset_path('marker-shadow.png') %>',
    shadowSize: [41, 41],
    shadowAnchor: [13, 41]
  });

  var markers = L.markerClusterGroup({ spiderfyOnMaxZoom: false, disableClusteringAtZoom: 16 });  
  var str = '';
  var marker;
  var opts = { latlng:[], color: "orange", fillColor: 'white', fillOpacity: 1, weight: 4 };

  //var MomentCircle = L.Circle.extend({ options: { latlng: [] } });

  <% for marker in @markers %>
    opts.latlng = <%= marker[:latlng] %>;
    if (<%= marker[:state] %>){ opts.color = "orange"; } else { opts.color = "blue"; }
    if (<%= marker[:is_mine] %>){ opts.fillColor = "white"; } else { opts.fillColor = opts.color; }
    marker = new L.Circle(<%= marker[:latlng] %>, 5, opts);
    
    var p = marker.bindPopup('<%= escape_javascript(render partial: "popup", locals: { marker: marker }) %>', { 
      is_mine: <%= marker[:is_mine] %>, state: <%= marker[:state] %>, latlng: <%= marker[:latlng] %>, feature_url: '<%= marker[:feature_url] %>' }); 
    
    markers.addLayer(marker);
  <% end %>
  
  map.addLayer(markers);
  map.on('popupopen', function(e) { MomentMap.handlePopup(e); });

<% end %>