<header class="group-header bg-color-3">
  <div class="container-fluid">
    <h1>
    <%= @group.name %> / <%= pluralize @group.memberships.count, "member" %>
    <%= link_to '(Edit)', edit_group_path(@group) if @group.is_admin?(current_user) %>
    </h1>
  </div>
</header>
  
<div id="group-content">

  <div class="container-fluid">
  <div class="row">   
    
    <div class="col-sm-2">
    <section id="about-group">
     <div class="row">
     <div class="col-xs-2 col-sm-12">
      <%= image_tag @group.image_url unless @group.image_url.blank? %>
     </div>
     <div class="col-xs-6 col-sm-12 no-padding-xs">
      <p><%= @group.description%></p>
     </div>
     </div>

      <%= button_to('Join group', group_add_user_path(@group), class: "rounded button btn") if current_user and current_user.groups.blank? %>
    </section>
    </div>

    <div id="visualisations" class="col-sm-10">
     
      <ul id="groupTabs" class="nav nav-pills" style=""> 
        <li class="active"><a href="#map-panel" class="" aria-controls="home" role="tab" data-toggle="tab">Map</a></li>
        <li class=""><a href="#hour-panel" class="" aria-controls="hour" role="tab" data-toggle="tab">Hour</a></li>
        <li class=""><a href="#week-panel" class="" aria-controls="week" role="tab" data-toggle="tab">Week</a></li>
        <li class=""><a href="#month-panel" class="" aria-controls="month" role="tab" data-toggle="tab">Month</a></li>
      </ul>

    <!--  
    <ul id="myTabs" class="nav navbar-nav tabs" style=""> 
      <li><%= link_to 'Map', '#map-panel' , { :class=>"active" } %></li>
      <li><%= link_to 'Hour', '#hour-panel' %></li>
      <li><%= link_to 'Week', '#week-panel' %></li>
      <li><%= link_to 'Month', '#month-panel' %></li>
    </ul> -->

    <div class="tab-content">

      <div id="hour-panel" class="tab-pane" role="tabpanel">
        <header class="vis-header">
          <%= button_to '&#9664;'.html_safe, '#', id: 'previous_day', method: :get, remote: true, data: {start: (@hourly_moments_start - 1.day).to_i, points: 24, interval: 'hour' } %>
          <h2 class="clear">
            <span id="hour_label"><%= "#{@hourly_moments_start.day.ordinalize} #{@hourly_moments_start.strftime('%B %Y')}" %></span>
          </h2>
          <%= button_to '&#9658;'.html_safe, '#', id: 'next_day', method: :get, remote: true, data: {start: (@hourly_moments_start + 1.day).to_i, points: 24, interval: 'hour' } %>
        </header>
        <canvas id="hour" width="300" height="100"></canvas>
      </div>
  
      <div id="week-panel" class="tab-pane" role="tabpanel">
        <header class="vis-header">
        <%= button_to '&#9664;'.html_safe, '#', id: 'previous_week', method: :get, remote: true, data: {start: (@week_moments_start - 1.week).to_i, points: 7, interval: 'day' } %>
        <h2><span id="week_label">Week beginning <%= "#{@week_moments_start.day.ordinalize} #{@week_moments_start.strftime('%B %Y')}" %></span></h2>
        <%= button_to '&#9658;'.html_safe, '#', id: 'next_week', method: :get, remote: true, data: {start: (@week_moments_start + 1.week).to_i, points: 7, interval: 'day' } %>
        </header>
        <canvas id="week" width="300" height="100"></canvas>
      </div>
       
       
      <div id="month-panel" class="tab-pane" role="tabpanel">
        <%= render partial: 'calendar', locals: { group: @group, calendar_moments: @calendar_moments } %>
      </div>
  
      <div id="map-panel" class="tab-pane active" role="tabpanel">         
        <div class="clear" id='map'>
        <% if @is_group_member %>

          <div id="map-legend">
            <p><span class="group-icon"></span> Group datamarks</p>
            <p><span class="user-icon"></span> My datamarks</p> 
          </div>

          <div class="moment-editors">
            <% for marker in @markers %>
            <% next unless marker[:is_mine] %>
            <%= render partial: 'moments/moment_editor', locals: { moment: marker[:moment] } %>
            <% end %>
          </div>

        <% end %>
        </div>
      </div>

    </div>
    </div> <!-- end of visualisations -->

  </div>
  </div>

</div>


<%= content_for :script do %>
  //HOUR LINE

  function generateData(points){
    var d = [];
    for (i=0; i<points; i++){
      d.push( (Math.floor(Math.random() * 201) - 100));
    }
    return d;
  };

  function prepForGraph(data, key){
    var d = [];

    data.forEach(function(point, i){
      d.push(point[key].ratio * 100);
    });

    return d;
  };

  var scalesOptions = {
    xAxes: [{ position: 'bottom' }],
    yAxes: [{ 
      ticks: { max: 100, min: -100, callback: function(value, index, values) {
        if (value == 100){
          return "100% up";
        } else if (value == 0) {
          return "50:50 up/down";
        } else if (value == -100){
          return "100% down";
        }
        return "";
      } },
      scaleLabel: { display: false, labelString: 'Ratio of ups to downs' }
    }]
  };

  var tooltipOptions =  {
    mode: 'single',
    callbacks: {
      label: function(tooltipItem, data) {
        var idx = tooltipItem.index;
        var point = this._data.momentData[idx];
        var str = "Group ups: " + point.group.ones + ", downs: " + point.group.zeroes;
        return str;
      },
      afterLabel: function(tooltipItem, data) {
        <% if @is_group_member %>
          var idx = tooltipItem.index;
          var point = this._data.momentData[idx];
          var str = "User ups: " + point.user.ones + ", downs: " + point.user.zeroes;
          return str;
        <% else %>
          return '';
        <% end %>
      }
    },
    footerFontStyle: 'normal'
  };

  var hourlyMoments = <%= @hourly_moments.to_json.html_safe %>;

  var hourDatasets = [
    { label: 'Up/Down Ratio', fill: false, backgroundColor: undefined, borderColor: "silver", data: prepForGraph(hourlyMoments, 'group'), lineTension: 0.2 }
  ];

  <% if @is_group_member %>
    hourDatasets.push({ label: 'My Ratio', fill: false, backgroundColor: undefined, 
      borderColor: "silver", data: prepForGraph(hourlyMoments, 'user'), 
      borderDash: [10.0, 10.0], borderDashOffset: 1.0, lineTension: 0.2
    });
  <% end %>

  <% hours = []; 24.times { |x| hours << (@week_moments_start + x.hour).strftime("%k") + "-" +
      (@week_moments_start + (x+1).hour).strftime("%k") } %>

  var labels = <%= hours.to_s.html_safe %>;

  var hourCanvas = document.getElementById("hour");
  var hourChart = new Chart(hourCanvas, {
    type: 'line',
    data: { labels: labels, datasets: hourDatasets, momentData: hourlyMoments },
    options: {
      scales: scalesOptions,
      tooltips: tooltipOptions
    }
  });

  // WEEK LINE

  var weekMoments = <%= @week_moments.to_json.html_safe %>;

  var weekDatasets = [
    { label: 'Up/Down Ratio', fill: false, backgroundColor: undefined, borderColor: "silver", data: prepForGraph(weekMoments, 'group'), lineTension: 0.2, momentData: weekMoments }
  ];

  <% if @is_group_member %>
    weekDatasets.push({ label: 'My Up/Down Ratio', fill: false, backgroundColor: undefined, 
      borderColor: "silver", data: prepForGraph(weekMoments, 'user'), 
      borderDash: [10.0, 10.0], borderDashOffset: 1.0, lineTension: 0.2
    });
  <% end %>
    
  <% days = []
  7.times { |x| time = @week_moments_start + x.day; days << time.strftime("%a #{time.day.ordinalize}") }; %>
  var labels = <%= days.to_s.html_safe %>;

  var weekCanvas = document.getElementById("week");
  
  var weekChart = new Chart(weekCanvas, {
    type: 'line',
    data: { xLabels: labels, yLabels: ["100", "0", "100"], datasets: weekDatasets, momentData: weekMoments },
    options: {
      scales: scalesOptions,
      tooltips: tooltipOptions
    }
  });

  var buildNextPrevUrl = function(e){
    var url = '<%= group_period_moments_url(@group) %>';
    var interval = $(e).attr('data-interval');
    var start    = $(e).attr('data-start');
    var points   = $(e).attr('data-points');
    url = url + '?start=' + start + '&points=' + points + '&interval=' + interval;
    return url;
  };

  //CHART CONTROLS
  $('#next_day, #previous_day').click(function(e){
    var url = buildNextPrevUrl(e.currentTarget);
    $('#next_day, #previous_day').prop('disabled', true);

    jQuery.getJSON(url, function(result) { 
      
      $('#next_day').attr('data-start', result.next_start);
      $('#previous_day').attr('data-start', result.previous_start);
      $('#next_day, #previous_day').prop('disabled', false);
      $('#hour_label').text(moment(result.start * 1000).format('Do MMMM YYYY'));

      hourChart.data.momentData = result.data;

      hourChart.data.datasets[0].data = prepForGraph(result.data, 'group');
      if (result.data[0].user.ratio != undefined){ 
        hourChart.data.datasets[1].data = prepForGraph(result.data, 'user');
      }

      hourChart.update(); 
    });
  });

  $('#next_week, #previous_week').click(function(e){
    var url = buildNextPrevUrl(e.currentTarget);
    $('#next_week, #previous_week').prop('disabled', true);

    jQuery.getJSON(url, function(result) { 
      
      $('#next_week').attr('data-start', result.next_start);
      $('#previous_week').attr('data-start', result.previous_start);
      $('#next_week, #previous_week').prop('disabled', false);
      $('#week_label').text('Week beginning '+ moment(result.start * 1000).format('Do MMMM YYYY'));

      weekChart.data.momentData = result.data;

      weekChart.data.datasets[0].data = prepForGraph(result.data, 'group');
      if (result.data[0].user.ratio != undefined){ 
        weekChart.data.datasets[1].data = prepForGraph(result.data, 'user');
      }

      weekChart.update(); 
    });
  });


  //MAP
  //TODO: Disable zoom on scroll 

  var map = L.map('map');
  map.setView([40.0, 0.0], 2);

  L.tileLayer('http://a.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
    maxZoom: 18, subdomains: '', }).addTo(map);

  var normalIcon = L.icon({
    iconUrl: '<%= asset_path('marker-icon.png') %>',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -27],
    shadowUrl: '<%= asset_path('marker-shadow.png') %>',
    shadowSize: [41, 41],
    shadowAnchor: [13, 41]
  });

  var mcgLayerSupportGroup = L.markerClusterGroup.layerSupport({ 
    spiderfyOnMaxZoom: false, disableClusteringAtZoom: 16, 
    iconCreateFunction: function (cluster) {
      var childMarkers = cluster.getAllChildMarkers();
      // count how many there are of each class
      
      // get the class with the highest count
      // select class
      var counts = { zeroes: 0, ones: 0 };
      childMarkers.forEach(function(m){
        if (m.options.state){ counts.ones++; } else { counts.zeroes++; } 
      });

      var clusterClass = 'marker-cluster ';
      if (counts.ones == counts.zeroes) {
        clusterClass = clusterClass + 'equal-amount';
      } else if (counts.ones > counts.zeroes) {
        clusterClass = clusterClass + 'more-ones';
      } else {
        clusterClass = clusterClass + 'more-zeroes';
      }

      var clusterHtml = '<div><span>' + cluster.getChildCount()+ '</span></div>';
      var d = L.divIcon({ html: clusterHtml, className: clusterClass, iconSize:null });
      return d;
    }
  });

  var str = '';
  var marker;
  var markers = [];
  var opts = { latlng:[], state: '', color: "#EA8511", fillColor: 'white', fillOpacity: 1, weight: 4 };
  var popups = {};

  <% for marker in @markers %>
    opts.latlng = <%= marker[:latlng] %>;
    opts.state = <%= marker[:state] %>;
    opts.time = '<%= marker[:time] %>';

    if (<%= marker[:state] %>){ opts.color = "#EA8511"; } else { opts.color = "#1B75BB"; }
    if (<%= marker[:is_mine] %>){ opts.fillColor = "white"; } else { opts.fillColor = opts.color; }

    marker = new L.circleMarker(<%= marker[:latlng] %>, opts);
    var p = marker.bindPopup('<%= escape_javascript(render partial: "popup", locals: { marker: marker }) %>', { 
      is_mine: <%= marker[:is_mine] %>, state: <%= marker[:state] %>, latlng: <%= marker[:latlng] %>, feature_url: '<%= marker[:feature_url] %>' }); 
    
    popups[<%= marker[:moment].id %>] = p;

    markers.push(marker);
  <% end %>

  var myLayerGroup = L.layerGroup(markers);
  mcgLayerSupportGroup.addTo(map);
  mcgLayerSupportGroup.checkIn(myLayerGroup);
  myLayerGroup.addTo(map);

  var sliderControl = L.control.sliderControl({
    position: "topright",
    layer: myLayerGroup,
    range: true
  });

  //Make sure to add the slider to the map ;-)
  map.addControl(sliderControl);
  //And initialize the slider
  sliderControl.startSlider();

  $('div.slider.leaflet-control').prepend('<p>Timespan</p>')

  map.on('popupopen', function(e) { MomentMap.handlePopup(e); });
  map.on('move', function(e) { 
    //$('div.moment-editor').removeClass('active');
    if ($('div.moment-editor.active').length > 0){
      L.DomEvent.stop(e);
      map.dragging.disable();
    }
  });

  map.on('dblclick', function(e) { 
    if ($('div.moment-editor.active').length > 0){
      L.DomEvent.stop(e);
      map.doubleClickZoom.disable();
    }
  });

  map.on('click', function(e) { 
    if ($('div.moment-editor.active').length == 0){ 
      map.dragging.enable(); 
      map.doubleClickZoom.enable();
    } else {
      L.DomEvent.stop(e);
      map.doubleClickZoom.disable();
    }
  });

  $('div.moment-editor .cancel').click(function(e){
    e.stopPropagation();
    $('.moment-editor.active').removeClass('active');
  });

  MomentMap.setMap(map);
  MomentMap.setPopups(popups);
  
<% end %>